import numpy as np
F = QQ
T.<x,y,z>=PolynomialRing(F)

bound = 0.0000001;

Q1 = -x^2 - y^2 - 3*z^2
Q2 = 3*x^2 + 5*y^2
Q3 = -7*x^2 - 23*y^2 - 12*z^2

Delta = Q1*Q3 - Q2^2;

M = [
[ 0.197870100298060 + 0.944232332076410*I, -0.227633442858320 + 0.367429883942420*I, 1.00000000000000, -0.0717342310888080 + 1.43858817743540*I,   0.300156780540120 + 2.05178491524610*I],
[ 0.197870100298060 - 0.944232332076410*I, -0.227633442858320 - 0.367429883942420*I, 1.00000000000000, -0.0717342310888080 - 1.43858817743540*I,   0.300156780540120 - 2.05178491524610*I],
[   20.9898830445520 - 4.39856815041670*I,    18.2454309515420 + 11.3035723096630*I, 1.00000000000000,   -4.47032197415560 + 25.4820833263370*I,    42.1383679317410 - 97.2322562475970*I],
[   20.9898830445520 + 4.39856815041670*I,    18.2454309515420 - 11.3035723096630*I, 1.00000000000000,   -4.47032197415560 - 25.4820833263370*I,    42.1383679317410 + 97.2322562475970*I]
];

"""
M = [
[-0.19787010120099 - 0.94423233166365*I, -0.22763344318149 + 0.36742988488115*I, 1.0000000000000, -0.071734231382581 + 1.4385881776566*I, 0.30015678177145 + 2.0517849143236*I],
[-0.19787010120099 - 0.94423233166365*I, -0.22763344318149 + 0.36742988488115*I, 1.0000000000000, 0.071734231382581 - 1.4385881776566*I, -0.30015678177145 - 2.0517849143236*I],
[   20.989883044552 + 4.3985681504163*I,    18.245430951542 - 11.303572309664*I, 1.0000000000000, -4.4703219741563 - 25.482083326338*I, 42.138367931744 + 97.232256247598*I],
[   20.989883044552 + 4.3985681504163*I,    18.245430951542 - 11.303572309664*I, 1.0000000000000, 4.4703219741563 + 25.482083326338*I, -42.138367931744 - 97.232256247598*I]
];
"""

for i in range(4):
    a = M[i][0]
    b = M[i][1]
    c = M[i][2]
    r = M[i][3]
    s = M[i][4]
    
    assert abs(Delta(a, b, c)) < bound;
    assert abs(Q1(a, b, c) - r^2) < bound;
    assert abs(Q3(a, b, c) - s^2) < bound;
    assert abs(Q2(a, b, c) - r*s) < bound;

print("-----------------");
mat = np.matrix(M, dtype=complex);
print(Matrix(M));
mat_rk = np.linalg.matrix_rank(mat);
print("Rank of Matrix: " + str(mat_rk));

print("------------------");

for i in range(5):
    new_mat = np.delete(mat, i, 1);
    new_det = np.linalg.det(new_mat);
    print("Determinant with Column " + str(i) + " Removed: " + str(new_det));
    print("Close to Zero: " + str(abs(new_det) < bound));
    print("-------------------------------");